/*!
 * jQuery Raty - A Star Rating Plugin
 *
 * Licensed under The MIT License
 *
 * @version        2.4.0
 * @author         Washington Botelho
 * @documentation  wbotelhos.com/raty
 * 
 */

;
(function(b) {
	var a = {
		init : function(c) {
			return this
					.each(function() {
						var o = this, m = b(o).empty();
						o.opt = b.extend(true, {}, b.fn.raty.defaults, c);
						m.data("settings", o.opt);
						o.opt.number = Math.min(Math.max(parseInt(o.opt.number,
								10), 0), 20);
						if (o.opt.path.substring(o.opt.path.length - 1,
								o.opt.path.length) != "/") {
							o.opt.path += "/";
						}
						if (typeof o.opt.score == "function") {
							o.opt.score = o.opt.score.call(o);
						}
						var h = !isNaN(parseInt(o.opt.score, 10)), g = "";
						if (h) {
							g = (o.opt.score > o.opt.number) ? o.opt.number
									: o.opt.score;
						}
						var n = o.opt.starOn, d = o.opt.space ? 4 : 0, j = "";
						for ( var k = 1; k <= o.opt.number; k++) {
							n = (g < k) ? o.opt.starOff : o.opt.starOn;
							j = (k <= o.opt.hints.length && o.opt.hints[k - 1] !== null) ? o.opt.hints[k - 1]
									: k;
							b("<img />", {
								src : o.opt.path + n,
								alt : k,
								title : j
							}).appendTo(o);
							if (o.opt.space) {
								m.append((k < o.opt.number) ? "&#160;" : "");
							}
						}
						var f = b("<input />", {
							type : "hidden",
							name : o.opt.scoreName
						}).appendTo(o);
						if (h) {
							if (o.opt.score > 0) {
								f.val(g);
							}
							a.roundStar.call(o, g);
						}
						if (o.opt.iconRange) {
							a.fillStar.call(o, g);
						}
						a.setTarget.call(o, g, o.opt.targetKeep);
						var e = o.opt.width
								|| (o.opt.number * o.opt.size + o.opt.number
										* d);
						if (o.opt.cancel) {
							var l = b("<img />", {
								src : o.opt.path + o.opt.cancelOff,
								alt : "x",
								title : o.opt.cancelHint,
								"class" : "raty-cancel"
							});
							if (o.opt.cancelPlace == "left") {
								m.prepend("&#160;").prepend(l);
							} else {
								m.append("&#160;").append(l);
							}
							e += o.opt.size + d;
						}
						if (o.opt.readOnly) {
							a.fixHint.call(o);
							m.children(".raty-cancel").hide();
						} else {
							m.css("cursor", "pointer");
							a.bindAction.call(o);
						}
						m.css("width", e);
					});
		},
		bindAction : function() {
			var c = this, g = b(c), d = g.children("input");
			g.mouseleave(function() {
				var h = d.val();
				a.initialize.call(c, h);
				a.setTarget.call(c, h, c.opt.targetKeep);
				if (c.opt.mouseover) {
					c.opt.mouseover.call(c, h);
				}
			});
			var f = g.children("img").not(".raty-cancel"), e = c.opt.half ? "mousemove"
					: "mouseover";
			if (c.opt.cancel) {
				g.children(".raty-cancel").mouseenter(function() {
					b(this).attr("src", c.opt.path + c.opt.cancelOn);
					f.attr("src", c.opt.path + c.opt.starOff);
					a.setTarget.call(c, null, true);
					if (c.opt.mouseover) {
						c.opt.mouseover.call(c, null);
					}
				}).mouseleave(function() {
					b(this).attr("src", c.opt.path + c.opt.cancelOff);
					g.mouseout();
					if (c.opt.mouseover) {
						c.opt.mouseover.call(c, d.val() || null);
					}
				}).click(function(h) {
					d.removeAttr("value");
					if (c.opt.click) {
						c.opt.click.call(c, null, h);
					}
				});
			}
			f
					.bind(
							e,
							function(i) {
								var j = parseInt(this.alt, 10);
								if (c.opt.half) {
									var h = parseFloat((i.pageX - b(this)
											.offset().left)
											/ c.opt.size), k = (h > 0.5) ? 1
											: 0.5;
									j = parseFloat(this.alt) - 1 + k;
									a.fillStar.call(c, j);
									if (c.opt.precision) {
										j = j - k + h;
									}
									a.showHalf.call(c, j);
								} else {
									a.fillStar.call(c, j);
								}
								g.data("score", j);
								a.setTarget.call(c, j, true);
								if (c.opt.mouseover) {
									c.opt.mouseover.call(c, j, i);
								}
							}).click(
							function(h) {
								d.val((c.opt.half || c.opt.precision) ? g
										.data("score") : this.alt);
								if (c.opt.click) {
									c.opt.click.call(c, d.val(), h);
								}
							});
		},
		cancel : function(c) {
			return b(this).each(function() {
				var d = b(this);
				if (d.data("readonly") == "readonly") {
					return false;
				}
				if (c) {
					a.click.call(this, null);
				} else {
					a.score.call(this, null);
				}
				d.mouseleave().children("input").removeAttr("value");
			});
		},
		click : function(c) {
			return b(this)
					.each(
							function() {
								if (b(this).data("readonly") == "readonly") {
									return false;
								}
								a.initialize.call(this, c);
								if (this.opt.click) {
									this.opt.click.call(this, c);
								} else {
									b
											.error('you must add the "click: function(score, evt) { }" callback.');
								}
								a.setTarget.call(this, c, true);
							});
		},
		fillStar : function(d) {
			var m = this, k = b(m), c = k.children("img").not(".raty-cancel"), e = c.length, j = 0, f, h, l;
			for ( var g = 1; g <= e; g++) {
				f = c.eq(g - 1);
				if (m.opt.iconRange && m.opt.iconRange.length > j) {
					h = m.opt.iconRange[j];
					if (m.opt.single) {
						l = (g == d) ? (h.on || m.opt.starOn)
								: (h.off || m.opt.starOff);
					} else {
						l = (g <= d) ? (h.on || m.opt.starOn)
								: (h.off || m.opt.starOff);
					}
					if (g <= h.range) {
						f.attr("src", m.opt.path + l);
					}
					if (g == h.range) {
						j++;
					}
				} else {
					if (m.opt.single) {
						l = (g == d) ? m.opt.starOn : m.opt.starOff;
					} else {
						l = (g <= d) ? m.opt.starOn : m.opt.starOff;
					}
					f.attr("src", m.opt.path + l);
				}
			}
		},
		fixHint : function() {
			var c = this, e = b(c), d = e.children("input"), g = parseInt(d
					.val(), 10), f = c.opt.noRatedMsg;
			if (!isNaN(g) && g > 0) {
				f = (g <= c.opt.hints.length && c.opt.hints[g - 1] !== null) ? c.opt.hints[g - 1]
						: g;
			}
			d.attr("readonly", "readonly");
			e.css("cursor", "default").data("readonly", "readonly").attr(
					"title", f).children("img").attr("title", f);
		},
		getScore : function() {
			var d = [], c;
			b(this).each(function() {
				c = b(this).children("input").val();
				c = (c == "") ? null : parseFloat(c);
				d.push(c);
			});
			return (d.length > 1) ? d : d[0];
		},
		readOnly : function(c) {
			return this.each(function() {
				var e = b(this), d = c ? "readonly" : undefined;
				if (e.data("readonly") == d) {
					return e;
				}
				var f = e.children(".raty-cancel");
				if (f.length) {
					if (c) {
						f.hide();
					} else {
						f.show();
					}
				}
				if (c) {
					e.unbind();
					e.children("img").unbind();
					a.fixHint.call(this);
				} else {
					a.bindAction.call(this);
					a.unfixHint.call(this);
				}
			});
		},
		reload : function() {
			return a.set.call(this, {});
		},
		roundStar : function(e) {
			var d = (e - Math.floor(e)).toFixed(2);
			if (d > this.opt.round.down) {
				var c = this.opt.starOn;
				if (d < this.opt.round.up && this.opt.halfShow) {
					c = this.opt.starHalf;
				} else {
					if (d < this.opt.round.full) {
						c = this.opt.starOff;
					}
				}
				b(this).children("img").not(".raty-cancel")
						.eq(Math.ceil(e) - 1).attr("src", this.opt.path + c);
			}
		},
		score : function() {
			return arguments.length ? a.setScore.apply(this, arguments)
					: a.getScore.call(this);
		},
		set : function(c) {
			this.each(function() {
				var d = b(this), f = d.data("settings"), e = d.clone()
						.removeAttr("style").insertBefore(d);
				d.remove();
				e.raty(b.extend(f, c));
			});
			return b(this.selector);
		},
		setScore : function(c) {
			return b(this).each(function() {
				if (b(this).data("readonly") == "readonly") {
					return false;
				}
				a.initialize.call(this, c);
				a.setTarget.call(this, c, true);
			});
		},
		setTarget : function(e, d) {
			if (this.opt.target) {
				var c = b(this.opt.target);
				if (c.length == 0) {
					b.error("target selector invalid or missing!");
				} else {
					var f = e;
					if (f == null && !this.opt.cancel) {
						b
								.error('you must enable the "cancel" option to set hint on target.');
					} else {
						if (!d || f == "") {
							f = this.opt.targetText;
						} else {
							if (this.opt.targetType == "hint") {
								if (f === null && this.opt.cancel) {
									f = this.opt.cancelHint;
								} else {
									f = this.opt.hints[Math.ceil(f - 1)];
								}
							} else {
								if (f != "" && !this.opt.precision) {
									f = parseInt(f, 10);
								} else {
									f = parseFloat(f).toFixed(1);
								}
							}
						}
						if (this.opt.targetFormat.indexOf("{score}") < 0) {
							b.error('template "{score}" missing!');
						} else {
							if (e !== null) {
								f = this.opt.targetFormat.toString().replace(
										"{score}", f);
							}
						}
						if (c.is(":input")) {
							c.val(f);
						} else {
							c.html(f);
						}
					}
				}
			}
		},
		showHalf : function(d) {
			var c = (d - Math.floor(d)).toFixed(1);
			if (c > 0 && c < 0.6) {
				b(this).children("img").not(".raty-cancel")
						.eq(Math.ceil(d) - 1).attr("src",
								this.opt.path + this.opt.starHalf);
			}
		},
		initialize : function(c) {
			if (c < 0) {
				c = 0;
			} else {
				if (c > this.opt.number) {
					c = this.opt.number;
				}
			}
			a.fillStar.call(this, c);
			if (c != "") {
				if (this.opt.halfShow) {
					a.roundStar.call(this, c);
				}
				b(this).children("input").val(c);
			}
		},
		unfixHint : function() {
			var e = b(this), d = e.children("img").filter(":not(.raty-cancel)");
			for ( var c = 0; c < this.opt.number; c++) {
				d
						.eq(c)
						.attr(
								"title",
								(c < this.opt.hints.length && this.opt.hints[c] !== null) ? this.opt.hints[c]
										: c);
			}
			e.css("cursor", "pointer").data("readonly", undefined).removeAttr(
					"title").children("input").attr("readonly", "readonly");
		}
	};
	b.fn.raty = function(c) {
		if (a[c]) {
			return a[c].apply(this, Array.prototype.slice.call(arguments, 1));
		} else {
			if (typeof c === "object" || !c) {
				return a.init.apply(this, arguments);
			} else {
				b.error("Method " + c + " does not exist!");
			}
		}
	};
	b.fn.raty.defaults = {
		cancel : false,
		cancelHint : "cancel this rating!",
		cancelOff : "cancel-off.png",
		cancelOn : "cancel-on.png",
		cancelPlace : "left",
		click : undefined,
		half : false,
		halfShow : true,
		hints : [ "bad", "poor", "regular", "good", "gorgeous" ],
		iconRange : undefined,
		mouseover : undefined,
		noRatedMsg : "not rated yet",
		number : 5,
		path : undefined,
		precision : false,
		round : {
			down : 0.25,
			full : 0.6,
			up : 0.76
		},
		readOnly : false,
		score : null,
		scoreName : "score",
		single : false,
		size : 16,
		space : true,
		starHalf : "star-half.png",
		starOff : "star-off.png",
		starOn : "star-on.png",
		target : undefined,
		targetFormat : "{score}",
		targetKeep : false,
		targetText : "",
		targetType : "hint",
		width : undefined
	};
})(jQuery);
